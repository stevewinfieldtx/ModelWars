import React, { useState, useEffect } from 'react';
import { supabase, BUCKET_NAME } from '../supabaseClient';

interface ModelProfileScreenProps {
  modelName: string;
  onBack: () => void;
}

const LoadingSpinner: React.FC = () => <div className="w-8 h-8 border-4 border-dashed rounded-full animate-spin border-purple-500"></div>;

const ModelProfileScreen: React.FC<ModelProfileScreenProps> = ({ modelName, onBack }) => {
  const [images, setImages] = useState<string[]>([]);
  const [backstory, setBackstory] = useState<string>('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchProfileData = async () => {
      setIsLoading(true);
      setError(null);

      try {
        // Fetch images
        const { data: imageData, error: imageError } = await supabase.storage
          .from(BUCKET_NAME)
          .list(modelName, { limit: 20 });

        if (imageError) throw new Error(`Failed to fetch images: ${imageError.message}`);
        
        const imageUrls = imageData
          .filter(file => file.id) // Filter out folders
          .map(file => {
            return supabase.storage.from(BUCKET_NAME).getPublicUrl(`${modelName}/${file.name}`).data.publicUrl;
          });
        setImages(imageUrls);

        // Fetch backstory
        const { data: storyData, error: storyError } = await supabase.functions.invoke('generate-backstory', {
          body: { modelName },
        });

        if (storyError) throw new Error(`Failed to generate backstory: ${storyError.message}`);

        setBackstory(storyData.story);

      } catch (err: any) {
        setError(err.message);
      } finally {
        setIsLoading(false);
      }
    };

    if (modelName) {
      fetchProfileData();
    }
  }, [modelName]);
  
  return (
    <div className="flex flex-col w-full h-full p-4 sm:p-8 bg-gray-900 text-white animate-fade-in overflow-hidden">
      <div className="flex items-center justify-between mb-4 flex-shrink-0">
        <h1 className="text-4xl sm:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-500 truncate">
          {modelName}
        </h1>
        <button
          onClick={onBack}
          className="bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg text-sm transition-transform duration-200 transform hover:scale-105 flex-shrink-0"
        >
          Back to Stats
        </button>
      </div>

      {isLoading ? (
        <div className="flex-grow flex items-center justify-center">
          <div className="text-center">
            <LoadingSpinner />
            <p className="mt-4 text-gray-400">Summoning profile...</p>
          </div>
        </div>
      ) : error ? (
        <div className="flex-grow flex items-center justify-center p-4 bg-red-900/20 border border-red-500/50 rounded-lg text-center">
          <p className="text-red-300">{error}</p>
        </div>
      ) : (
        <div className="flex-grow flex flex-col overflow-hidden">
          {/* Image Carousel */}
          <div className="relative h-48 sm:h-64 mb-6 flex-shrink-0 overflow-hidden">
            <div className="absolute inset-0 flex items-center animate-scroll-x" style={{'--scroll-duration': `${images.length * 4}s`} as React.CSSProperties}>
              {[...images, ...images].map((url, index) => (
                <img key={index} src={url} alt={`${modelName} profile image ${index}`} className="h-full w-auto rounded-lg object-cover mr-4 shadow-lg"/>
              ))}
            </div>
             <style>{`
              @keyframes scroll-x {
                from { transform: translateX(0); }
                to { transform: translateX(-50%); }
              }
              .animate-scroll-x {
                animation: scroll-x var(--scroll-duration, 20s) linear infinite;
              }
            `}</style>
          </div>

          {/* Backstory */}
          <div className="flex-grow bg-gray-800/50 p-6 rounded-2xl overflow-y-auto">
            <h2 className="text-2xl font-semibold mb-3 text-gray-300">Backstory</h2>
            <p className="text-gray-300 whitespace-pre-wrap leading-relaxed">
                {backstory}
            </p>
            <p className="text-xs text-gray-500 mt-4 italic text-right">
              Generated by Google Gemini
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default ModelProfileScreen;
